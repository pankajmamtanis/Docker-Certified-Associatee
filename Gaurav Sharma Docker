Introduction to Playlist
------------------------------------------------------------------------------------------
Docker Introduction & Architecture
  project1 --> pywinrm_1.1 (Environment-1)
  project2 --> pywinrm_1.2 (Environment-2)
  Each application as a different container VS with VM each application needs a host OS to be installed, quite heavy
  Infra> Host OS> Docker> App-A/App-B       VS        Infra> Hypervisor>VM-Guest OS-AppA       Infra> Hypervisor>VM-Guest OS-AppB
------------------------------------------------------------------------------------------
Installation, docker info and docker version commands
sudo dnf -y install dnf-plugins-core
sudo dnf config-manager ...... from docker website
sudo dnf install docker-ce

docker info
service docker status
service docker start /systemctl start docker
docker info
docker version

------------------------------------------------------------------------------------------
Create first container, list container, remove container
docker --help |less
docker container ls
docker image ls
docker network ls
docker ps

docker container run ubuntu cat /etc/os-release 9run command and close container
docker container ls
docker container ls -a (all container exited too)
docker container run ubuntu sleep 30
docker container ls (will show above for 30 secs and then will exit)

docker container run nginx
https://docs.docker.com/get-started/overview/

docker container rm <container-ID> (removing container)
------------------------------------------------------------------------------------------
create a container in background , stop, start, detach container

docker container ls -a
docker container start <container-ID of dead container from ls -a>
docker container stop <container-ID of container from ls >

docker container run -d ubuntu sleep 30 ( -d runs the container in backgroud in DETACH MODE)
docker container run -d -it ubuntu /bin/bash ( interactive terminal (teletype) - shell) --. CTRL-D or exit to come out.

with the above to keep container running - CTRL+p+Q

docker container ls -aq (shows Id for all containers)
docker container rm $(docker container ls -aq) (removes all containers, using the output for all containers stopped or running in our environment)

------------------------------------------------------------------------------------------

DOCKER CONTAINER INSPECT

docker container run -d nginx
docker container inspect <container-ID> (can check IP address and open ip address on chrome to show ngnix)

------------------------------------------------------------------------------------------

whats going on inside the container

docker container inspect
docker container logs <container-ID>
docker container top <container-ID>
ps -aux
docker container stats (gives stats of cpu muemory network for running containers)

------------------------------------------------------------------------------------------

Docker port mapping, rename container, restart container, exec container

as per previous we had one nginx container running, check IP address. and web browser access its working
access the same nginx from other computer, we can achieve this through port forwarding.

go inside teh nginx container bin/bash

docker 3600 --> xyz:80
docker container run -d -p 3600:80 --name test1_web nginx (mapping outside machine port 3600 to container port 80 which is running nginx to take care of requests)
netstat -nltp (3600 port at the local machine will be in listening state)

