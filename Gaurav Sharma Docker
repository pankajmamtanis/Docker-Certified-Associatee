Introduction to Playlist
------------------------------------------------------------------------------------------
Docker Introduction & Architecture
  project1 --> pywinrm_1.1 (Environment-1)
  project2 --> pywinrm_1.2 (Environment-2)
  Each application as a different container VS with VM each application needs a host OS to be installed, quite heavy
  Infra> Host OS> Docker> App-A/App-B       VS        Infra> Hypervisor>VM-Guest OS-AppA       Infra> Hypervisor>VM-Guest OS-AppB
------------------------------------------------------------------------------------------
Installation, docker info and docker version commands
sudo dnf -y install dnf-plugins-core
sudo dnf config-manager ...... from docker website
sudo dnf install docker-ce

docker info
service docker status
service docker start /systemctl start docker
docker info
docker version

------------------------------------------------------------------------------------------
Create first container, list container, remove container
docker --help |less
docker container ls
docker image ls
docker network ls
docker ps

docker container run ubuntu cat /etc/os-release 9run command and close container
docker container ls
docker container ls -a (all container exited too)
docker container run ubuntu sleep 30
docker container ls (will show above for 30 secs and then will exit)

docker container run nginx
https://docs.docker.com/get-started/overview/

docker container rm <container-ID> (removing container)
------------------------------------------------------------------------------------------
create a container in background , stop, start, detach container

docker container ls -a
docker container start <container-ID of dead container from ls -a>
docker container stop <container-ID of container from ls >

docker container run -d ubuntu sleep 30 ( -d runs the container in backgroud in DETACH MODE)
docker container run -d -it ubuntu /bin/bash ( interactive terminal (teletype) - shell) --. CTRL-D or exit to come out.

with the above to keep container running - CTRL+p+Q

docker container ls -aq (shows Id for all containers)
docker container rm $(docker container ls -aq) (removes all containers, using the output for all containers stopped or running in our environment)

------------------------------------------------------------------------------------------

DOCKER CONTAINER INSPECT

docker container run -d nginx
docker container inspect <container-ID> (can check IP address and open ip address on chrome to show ngnix)

------------------------------------------------------------------------------------------

whats going on inside the container

docker container inspect
docker container logs <container-ID>
docker container top <container-ID>
ps -aux
docker container stats (gives stats of cpu muemory network for running containers)

------------------------------------------------------------------------------------------

Docker port mapping, rename container, restart container, exec container

as per previous we had one nginx container running, check IP address. and web browser access its working
access the same nginx from other computer, we can achieve this through port forwarding.

go inside teh nginx container bin/bash

docker 3600 --> xyz:80
docker container run -d -p 3600:80 --name test1_web nginx (mapping outside machine port 3600 to container port 80 which is running nginx to take care of requests)
netstat -nltp (3600 port at the local machine will be in listening state)
now this will be accessible via 172.16.0.7(containerIP) with port 80 /// or 192.168.0.104:3600 inside the contianer or from the machine.

for more software installs inside container
docker container exec -it <container-ID> bin/bash -- then install what is needed

docker container rename <containerID> tiger_web (renaming a container)

docker container restart <containerID>

------------------------------------------------------------------------------------------

Attach to running container, kill, wait, pause, unpause, prune, port

run nginx container
docker container run -d nginx (in background)
docker cotnaincer attach <containerid> (bring the same container in foreground)
to test it, get the IP address of container using docker inspect, access from chrome, then each time we access we get logs, that it got accessed.

docker container run -itd ubuntu /bin/bash
docker container attach <containerId..>

docker stop - stops all processes and then brings it down
docker kill - immediately kills container

docker container wait <containerID> (this waits till container stops and shares us the exit status)

docker container pause <containerID> (pauses the container)
docker container unpause <containerID> (unpauses the container)

docker container prune (deletes all containers not in use)

docker container port tigir_web (port mapping)
__________________________________________________________________________________________________
 
 create docker container, diff docker container and copy file into container
 
docker container create ubuntu sleep 60 (will only create not run it, only shows it in created state)
docker container start <containerID> 

docker container diff <containerID> (shows all changes which are made on the container) c-file/dir created      a-file/dir add      d-file delete
docker container run -it ubuntu /bin/bash (inside the container)
docker container diff <containerID> (no change for now as we just entered bin/bash)
watch 'docker container diff <containerID>' (live command which runs this command every 2secs) try to run this in second terminal
touch few files and dir and we will be able to see the c and a movment in watch terminal

docker container cp test/ <containerID>:/tmp/ (copies from local to docker file structure)

__________________________________________________________________________________________________

Export and Import of container (update the image file and udpating the same with build not the source code which can be used elsewhere)

docker container run -it ubuntu /bin/bash
apt-get install update
apt-get install tree git -y

docker container export <containerID> >my-ubuntu-tree-git.tar OR (exporting the image in .tar format)
docker container export <containerID> -o my-ubuntu-tree-git1.tar

docker image ls (to check what are existing one before we run below command)
docker image import my-ubuntu-tree-git1.tar my_ubuntu_t_g
docker image ls
docker container run -it my_ubuntu_t_g /bin/bash
then validate if tree and git--help are installed
tree
git --version

------------------------------------------------------------------------------------------------

how to create docker image from running container (docker commit)

docker container run -it ubuntu /bin/bash
cd /tmp
touch 1..10
docker container commit --author 'Gaurav sharma" -m "this is test message for commit" <containerID> my_test_image_name
docker image ls

remove the existing container spun on ubuntu
docker container rm -f <containerId>

docker container run -it my_test_image_name /bin/bash

validate by checking the files in tmp

------------------------------------------------------------------------------------------------
How to push image on docker hub, image tag, image pull, docker login (first checks if image is available locally, if not thenly it goes online on docker-hub to pull it.

docker container run -it busybox /bin/bash

dockerhub-ubuntu versions 14.0.4:trustu-=20180929:trusty (either of the tags can be used for pull)
docker pull ubuntu:14.0.4

can see the dockerfile for a specific image from dockerhub in dockerfile section of teh said image.

for docker hub push
docker image tag my_test_image_name hub.docker.com/pankajmamtanis/my_test_image_name (taggin the image)
docker login (user/pass)
docker push pankajmamtanis/my_test_image_name (pushing the image on dockerhub on your account)


















